// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (name, tribe_id) VALUES ($1, $2) RETURNING id, name, gender, tribe_id
`

type CreateStudentParams struct {
	Name    string
	TribeID sql.NullInt64
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent, arg.Name, arg.TribeID)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Gender,
		&i.TribeID,
	)
	return i, err
}

const createSubject = `-- name: CreateSubject :one
INSERT INTO subjects (name, teacher_id, tribe_id) VALUES ($1, $2, $3) RETURNING id, name, teacher_id, tribe_id
`

type CreateSubjectParams struct {
	Name      string
	TeacherID sql.NullInt64
	TribeID   sql.NullInt64
}

func (q *Queries) CreateSubject(ctx context.Context, arg CreateSubjectParams) (Subject, error) {
	row := q.db.QueryRowContext(ctx, createSubject, arg.Name, arg.TeacherID, arg.TribeID)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TeacherID,
		&i.TribeID,
	)
	return i, err
}

const createTribe = `-- name: CreateTribe :one
INSERT INTO tribes (name) VALUES ($1) RETURNING id, name, teacher_id
`

func (q *Queries) CreateTribe(ctx context.Context, name sql.NullString) (Tribe, error) {
	row := q.db.QueryRowContext(ctx, createTribe, name)
	var i Tribe
	err := row.Scan(&i.ID, &i.Name, &i.TeacherID)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name) VALUES ($1) RETURNING id, name, role
`

func (q *Queries) CreateUser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, name)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Role)
	return i, err
}

const getStudent = `-- name: GetStudent :one
SELECT id, name, gender, tribe_id FROM students WHERE id = $1
`

func (q *Queries) GetStudent(ctx context.Context, id int64) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudent, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Gender,
		&i.TribeID,
	)
	return i, err
}

const getStudents = `-- name: GetStudents :many
SELECT id, name, gender, tribe_id FROM students WHERE tribe_id = $1
`

func (q *Queries) GetStudents(ctx context.Context, tribeID sql.NullInt64) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, getStudents, tribeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Gender,
			&i.TribeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTribe = `-- name: GetTribe :one
SELECT id, name, teacher_id FROM tribes WHERE id = $1
`

func (q *Queries) GetTribe(ctx context.Context, id int64) (Tribe, error) {
	row := q.db.QueryRowContext(ctx, getTribe, id)
	var i Tribe
	err := row.Scan(&i.ID, &i.Name, &i.TeacherID)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, role FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Role)
	return i, err
}

const updateStudentName = `-- name: UpdateStudentName :exec
UPDATE students SET name = $2 WHERE id = $1
`

type UpdateStudentNameParams struct {
	ID   int64
	Name string
}

func (q *Queries) UpdateStudentName(ctx context.Context, arg UpdateStudentNameParams) error {
	_, err := q.db.ExecContext(ctx, updateStudentName, arg.ID, arg.Name)
	return err
}
